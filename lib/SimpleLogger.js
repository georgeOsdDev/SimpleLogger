// Generated by CoffeeScript 1.3.1
(function() {
  var SimpleLogger,
    __slice = [].slice;

  module.exports = SimpleLogger = (function() {

    SimpleLogger.name = 'SimpleLogger';

    function SimpleLogger(prefix, level) {
      this.prefix = prefix;
      this.LEVEL = {
        FATAL: '[ FATAL ]',
        ERROR: '[ ERORR ]',
        WARN: '[ WARN ]',
        INFO: '[ INFO ]',
        DEBUG: '[ DEBUG ]',
        TRACE: '[ TRACE ]'
      };
      this.level = level ? level : this.LEVEL.DEBUG;
    }

    SimpleLogger.prototype.leftZeroPad = function(num) {
      if (num < 10) {
        return "0" + num;
      } else {
        return num;
      }
    };

    SimpleLogger.prototype.localeTime = function() {
      var date, ret;
      date = new Date();
      ret = "" + (date.getFullYear()) + "-" + (this.leftZeroPad(date.getMonth() + 1)) + "-" + (this.leftZeroPad(date.getDate())) + " " + (this.leftZeroPad(date.getHours())) + ":" + (this.leftZeroPad(date.getMinutes())) + ":" + (this.leftZeroPad(date.getSeconds()));
      return ret;
    };

    SimpleLogger.prototype.print = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.prefix) {
        args.unshift(this.prefix);
      }
      args.unshift(this.localeTime());
      return typeof console !== "undefined" && console !== null ? console.log.apply(console, args) : void 0;
    };

    SimpleLogger.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.print.apply(this, [this.level].concat(__slice.call(args)));
    };

    SimpleLogger.prototype.fatal = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.print.apply(this, [this.LEVEL.FATAL].concat(__slice.call(args)));
    };

    SimpleLogger.prototype.error = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.print.apply(this, [this.LEVEL.ERROR].concat(__slice.call(args)));
    };

    SimpleLogger.prototype.warn = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.print.apply(this, [this.LEVEL.WARN].concat(__slice.call(args)));
    };

    SimpleLogger.prototype.info = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.print.apply(this, [this.LEVEL.INFO].concat(__slice.call(args)));
    };

    SimpleLogger.prototype.debug = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.print.apply(this, [this.LEVEL.DEBUG].concat(__slice.call(args)));
    };

    SimpleLogger.prototype.trace = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.print.apply(this, [this.LEVEL.TRACE].concat(__slice.call(args)));
    };

    SimpleLogger.prototype.setLevel = function(level) {
      if (level.toUpperCase() in this.LEVEL) {
        this.level = this.LEVEL[level.toUpperCase()];
      }
    };

    SimpleLogger.prototype.getLevel = function() {
      return this.level;
    };

    return SimpleLogger;

  })();

}).call(this);
